// A few basic mathematical functions based on user inputted numbers.

// Factorial function which multiples a number by all integers below it,
// a Reverse number function which reverses the order of digits, and
// two Fibonacci sequence functions, one using a for loop and the other
// using recursion.

// Update 26-02-16
// Modified get_num_input to use the improved version from function pointer program
// Added Pascal's Triangle function which automatically prints the triangle left-aligned.



#include <stdio.h>
#include <stdlib.h>

void flush_stdin(void);
int get_num_input(char* print_message);

int factorial(int number);
int reverse_nums(int original);

void print_fibonacci(void);

int fibonacci(int reference);
int fibonacci_recur(int reference);
int fib_recur_iter(int a, int b, int reference);

void pascal_triangle(int maxlevel);


// Canned functions that ask for a number from STDin, return if number is non-zero,
// and flush STDin and loop otherwise.
void flush_stdin(void)
{
    int c;
    while((c = getchar()) != EOF)
        if (c == '\n')
            break;
}


#define PROCESS_STRING_LENGTH 30
int get_num_input(char* print_message)
{
    char process[PROCESS_STRING_LENGTH] = {0};
    char *endpt;

    while(1) {                                  //Infinite Loop
        printf("%s", print_message);
        fgets(process, PROCESS_STRING_LENGTH, stdin);
        int i = 0;
        while ((process[i] != 0) && (i < PROCESS_STRING_LENGTH)) {       //Null terminator
            if ((process[i] == '-' && ((process[i+1] >= '0') && (process[i+1] <= '9'))) ||
                (process[i] >= '0') && (process[i] <= '9')) {
                return strtol(&process[i], &endpt, 10);
            }
            i++;
        }
        printf("Error, that does not appear to be a valid number.\n");
    }
}

// Can definitely do more error checking on strtol's output.
// Also need a method of checking if number of characters entered is greater than PROCES_STRING_LENGTH
// as this causes issues with cutoff and also leaving characters in stdin.


// Recursive factorial function. Could easily be done with a "for" loop and no
// recursion, but this is very convenient and the integer will overflow long
// before the stack does.
// Also due to only being a linear recursive process, it does not require a
// significant amount of resources compared to other recursive processes.
int factorial(int number)
{
    if (number == 1) return 1;
    return (number * factorial(number - 1));
}
// Only works up until 13! due to integer limitations.



// Basic function that reverses the order or an inputted number.
// Could have also been done by converting to a string and then reversing the
// number one character at a time, but this solution avoids possibly messy
// string print functions.
int reverse_nums(int original)
{
	int result = 0;

	while(original != 0)
	{
		result *= 10;
		result += original % 10;
		original /= 10;
	}
	return result;
}


// Prints the first 100 Fibonacci numbers. Just a simple function to prototype
// one Fibonacci algorithm.
void print_fibonacci(void)
{
    int a = 0;
    int b = 1;
    int c = 0;          // c initialised to 0, but set before printing

    // Print initial 0 and 1 values in sequence
    printf("%i\n", a);
    printf("%i\n", b);

    int i;

    for (i=1; i<=100; i++)
    {
        c = a + b;
        printf("%i\n", c);
        a = b;
        b = c;
    }
}

int fibonacci(int reference)
{
    int a = 0;
    int b = 1;
    int c = 0;          // c initialised to 0, but set before printing

    int i;

    for (i=1; i<reference; i++)
    {
        c = a + b;
        a = b;
        b = c;
    }
    return c;
}


// Fibonacci Sequence using recursion, structure taken from a Lisp Fibonacci
// sequence calculator.
// Initially called fibonacci_recur sets initial values while fib_recur_iter
// runs every subsequent iteration until the passed reference is at 0.
int fibonacci_recur(int reference)
{
    if (reference == 0) return 0;
    return fib_recur_iter(0, 1, (reference-1));
}

int fib_recur_iter(int a, int b, int reference)
{
    if (reference == 0) return b;
    return fib_recur_iter(b, (a+b), (reference-1));
}

// Pascal's Triangle Function
#define MAX_ARRAY_LENGTH 30
void pascal_triangle(int maxlevel){

    if (maxlevel >= MAX_ARRAY_LENGTH) {
        printf("Error, number is too large.");
        return;
    }

    // values[30] is used since C cannot initialise an array length with a variable
    int values[MAX_ARRAY_LENGTH] = {0};                // Initialise array to all 0
    values[0] = 1;                       // Set first value in array to 1
    int level = 0;                       // level goes from 0 to maxlevel - 1
    int i = 0;


    for (level = 0; level < maxlevel; level++) {
        // Get next level
        for (i = level; i > 0; i--) {       // Loop counts backwards due to array being left-aligned
            values[i] += values[i-1];       // Rightmost will always add 1 to 0, leftmost will never change
        }

        // Print current level
        for (i = 0; i <= level; i++) {
            printf("%d ", values[i]);
        }
        printf("\n");

    }
}



int main()
{

    int number = 0;


    number = get_num_input("Please enter a number to be factorialised:");
    number = factorial(number);
    printf("The factorial is: %d\n\n", number);

    number = get_num_input("Please enter a number to be reversed:");
    number = reverse_nums(number);
    printf("The reversed number is: %d\n\n", number);

    // print_fibonacci():

    // Fibonacci using for loop
    number = get_num_input("Please enter a what number in the Fibonacci sequence you would like (calculated using for loop):");
    number = fibonacci(number);
    printf("The Fibonacci number is: %d\n\n", number);

    // Fibonacci using recursion
    number = get_num_input("Please enter a what number in the Fibonacci sequence you would like (calculated using recursion):");
    number = fibonacci_recur(number);
    printf("The Fibonacci number is: %d\n\n", number);

    // Print Pascal's Triangle
    number = get_num_input("Please enter a level of Pascal's Triangle you would like to print up until:");
    pascal_triangle(number);    //No need to return and print as pascal_triangle prints already



    return 0;
}
